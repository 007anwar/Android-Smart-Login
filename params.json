{"name":"Android Smart Login","tagline":"A smart way to add Login functionality to your Android app","body":"![Image](https://raw.githubusercontent.com/CodelightStudios/Android-Smart-Login/master/Screenshots/About.png)\r\n\r\n#What's in the box\r\n\r\n- A material designed **login page**\r\n- Implementation of **Facebook** and **Google** login\r\n- Easy way to implement custom login and sign up\r\n- Smart and easy way to apply the flow with **SmartUser**\r\n- Customizable login screen (more customization will be available in upcoming versions)\r\n\r\n#Setup\r\n##1. Get the library from here [Download](https://github.com/CodelightStudios/Android-Smart-Login/raw/master/releases/smartloginlibrary-v0.5beta.aar)\r\nSince it's in beta, decided not to put it in Maven Central. Will provide the gradle dependency from the first release.\r\n**So for now please add the library as a module to your project.**\r\n\r\n##2. Add the AAR as a module dependency to your app.\r\nYou can do this by clicking File -> New -> New Module...\r\nThen choose \"Import .JAR/.AAR package\" option and the add the downloaded aar file as a dependency.\r\nSince we implemented Facebook and Google login for you, it is necessary to add the following dependencies in your **app/build.gradle**\r\n```\r\n    //Support libraries\r\n    compile 'com.android.support:appcompat-v7:23.0.1'\r\n    compile 'com.android.support:design:23.0.1'\r\n    //Facebook SDK\r\n    compile 'com.facebook.android:facebook-android-sdk:4.0.1'\r\n    //Google Play Services\r\n    compile 'com.google.android.gms:play-services:8.1.0'\r\n    //GSON library\r\n    compile 'com.google.code.gson:gson:2.3.1'\r\n```\r\nWe used \r\n- Support Library for maintaining compatibily of material design\r\n- Facebook SDK and Google Play Services are necessary as we implemented social logins\r\n- GSON library is must for now as we used it to set user sessions\r\n\r\n##3. Start the LoginActivity\r\n```java\r\n    Intent intent = loginBuilder.with(context)\r\n                        .setAppLogo(APP_LOGO)\r\n                        .isFacebookLoginEnabled(true).withFacebookAppId(\"APP_ID\")\r\n                        .withFacebookPermissions(PERMISSIONS)\r\n                        .isGoogleLoginEnabled(true)\r\n                        .build();\r\n    startActivityForResult(intent, SmartLoginConfig.LOGIN_REQUEST);\r\n```\r\n**Don't forget to add the following in the manifest**\r\n```xml\r\n    <uses-permission android:name=\"android.permission.INTERNET\"/>\r\n    <!-- Required for Google Login -->\r\n    <uses-permission android:name=\"android.permission.GET_ACCOUNTS\" />\r\n    <uses-permission android:name=\"android.permission.USE_CREDENTIALS\" />\r\n    <!-- In application tag (Need to register the Login activity in your app) -->\r\n    <activity\r\n            android:name=\"studios.codelight.smartloginlibrary.SmartLoginActivity\"\r\n            android:theme=\"@style/AppTheme\" />\r\n    <activity android:name=\"com.facebook.FacebookActivity\"\r\n            android:configChanges=\r\n                \"keyboard|keyboardHidden|screenLayout|screenSize|orientation\"\r\n            android:theme=\"@android:style/Theme.Translucent.NoTitleBar\"\r\n            android:label=\"@string/app_name\" />\r\n```\r\n**Config**\r\n- **APP_LOGO** - Integer - Optional - Send your logo to display on the login page\r\n\r\n *Facebook Login setup*\r\n- **APP_ID** - String - Needed if Facebook login is enabled - App ID of your app on facebook\r\n- **PERMISSIONS** - ArrayList<String> - Needed if Facebook login is enabled(if not specified default permissions are taken) [Permissions](https://gist.github.com/kalyandechiraju/f51771548836680e7a96) for Facebook Login [Learn more](https://developers.facebook.com/docs/facebook-login/permissions/v2.5)\r\n\r\n *Google Login setup*\r\n- Just enable Google login by passing *true* to **isGoogleLoginEnabled** method\r\n- Before that, you need to configure your app in Google Developers Console and get the [Configuration File](https://developers.google.com/mobile/add?platform=android&cntapi=signin). Learn more about [Google sign in](https://developers.google.com/identity/sign-in/android/start)\r\n- Place the configuration file in the **app/** directory and that's it\r\n\r\n##4. Get back the logged in User\r\nFrom the intent that you passed, Login Activity will be started. Based on user interaction, it will send back the result code along with SmartUser object(if login is successful). Hence you can catch the SmartUser object in **onActivityResult** method\r\n\r\n*For example*\r\n```java\r\n    @Override\r\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        //Intent \"data\" contains the user object\r\n        if(resultCode == SmartLoginConfig.FACEBOOK_LOGIN_REQUEST){\r\n            SmartFacebookUser user;\r\n            try {\r\n                user = data.getParcelableExtra(SmartLoginConfig.USER);\r\n                //use this user object as per your requirement\r\n            }catch (Exception e){\r\n                Log.e(getClass().getSimpleName(), e.getMessage());\r\n            }\r\n        }else if(resultCode == SmartLoginConfig.GOOGLE_LOGIN_REQUEST){\r\n            SmartGoogleUser user;\r\n            try {\r\n                user = data.getParcelableExtra(SmartLoginConfig.USER);\r\n                //use this user object as per your requirement\r\n            }catch (Exception e){\r\n                Log.e(getClass().getSimpleName(), e.getMessage());\r\n            }\r\n        }else if(resultCode == SmartLoginConfig.CUSTOM_LOGIN_REQUEST){\r\n            SmartUser user = data.getParcelableExtra(SmartLoginConfig.USER);\r\n            //use this user object as per your requirement\r\n        }else if(resultCode == RESULT_CANCELED){\r\n            //Login Failed\r\n        }\r\n    }\r\n```\r\n**voila! that's it. You now have the entire user login functionality in your app**\r\n\r\n##5. Implementing custom user login and sign up\r\nGet more out of the library by easily implementing your logic to login and sign up the users.\r\nFor this all you need to do is implement the following code\r\n\r\n```java\r\n        SmartCustomLoginListener loginListener = new SmartCustomLoginListener() {\r\n            @Override\r\n            public boolean customSignin(SmartUser smartUser) {\r\n                //do something with smartUser\r\n                if(SUCCESS){\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public boolean customSignup(SmartUser smartUser) {\r\n                //do something with smartUser\r\n                if(SUCCESS){\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public boolean customUserSignout(SmartUser smartUser) {\r\n                //do something with smartUser\r\n                if(SUCCESS){\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n        };\r\n```\r\nNext pass that **loginListener** into **setSmartCustomLoginHelper** method of **loginBuilder**\r\n\r\n```java\r\nIntent intent = loginBuilder.with(context)\r\n        .isCustomLoginEnabled(true).setSmartCustomLoginHelper(loginListener)\r\n        .build();\r\nstartActivityForResult(intent, SmartLoginConfig.LOGIN_REQUEST);\r\n```\r\n\r\n#How it works\r\n\r\n![Image](https://raw.githubusercontent.com/CodelightStudios/Android-Smart-Login/master/Screenshots/SmartLoginFlow.png)\r\n\r\n#Other Features\r\nGet the current logged in user at anytime from your application by just calling **UserSessionManager.getCurrentUser** method\r\n```java\r\nSmartUser currentUser = UserSessionManager.getCurrentUser(context);\r\nif(currentUser != null){\r\n    //You have got what you need\r\n}\r\n```\r\n#Contibution\r\nI would love to welcome everyone of you to contribute to this project and make it better. If you feel the LoginPage is not looking great (I know, I am not a great designer), feel free to design and make it better if you think its necessary. Encounter any issue? Don't hesitate to [open an issue](https://github.com/CodelightStudios/Android-Smart-Login/issues)\r\n\r\nConvention I would like to follow: **Master branch** would be the development branch. So feel free to fork from the Master branch. **Release branch** will be merged with master branch after every major release.\r\n\r\n#License\r\n\r\n    Copyright 2015 Codelight Studios\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}